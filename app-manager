#!/bin/bash

# Author: Dillrex
# Contributors: Quadsam, Dillrex
# Version: 1.1
# Repository: GitHub (https://github.com/Dillrex/APP-Manager)

VERSION=1.1
BACKUP_DIR="$HOME/app_manager_backups"
UPSTREAM_VERSION_URL="https://raw.githubusercontent.com/Dillrex/APP-Manager/main/version.txt"
UPSTREAM_SCRIPT_URL="https://raw.githubusercontent.com/Dillrex/APP-Manager/main/app-manager"
TEMP_UPDATE_FILE="$HOME/app-manager.update"

# Function to list installed apps
list_installed_apps() {
    dpkg-query -f '${binary:Package}\n' -W | grep -vE "linux|^lib|^firmware|^systemd|^dpkg|^apt|^bash|^glibc|^python" | sort
}

# Function to backup installed apps
backup_apps() {
    mkdir -p "$BACKUP_DIR"
    local backup_file="$BACKUP_DIR/app_list_$(date +'%Y%m%d%H%M%S').txt"
    list_installed_apps > "$backup_file"
    zenity --info --text="Backup completed! Saved to $backup_file"
}

# Function to restore apps from a backup
restore_apps() {
    local backup_file="$1"
    if [[ -f "$backup_file" ]]; then
        while IFS= read -r app; do
            sudo apt-get install -y "$app"
        done < "$backup_file"
        zenity --info --text="Restore completed!"
    else
        zenity --error --text="Invalid backup file: $backup_file"
    fi
}

# Function to install an app
install_app() {
    local file=$1
    if [[ "$file" == *.deb ]]; then
        echo "Installing $file..."
        if sudo dpkg -i "$file" && sudo apt-get install -f -y; then
            zenity --info --text="Successfully installed $file."
        else
            zenity --error --text="Failed to install $file. Check for errors."
        fi
    else
        zenity --error --text="Unsupported file type. Please select a valid .deb file."
    fi
}

# Function to uninstall an app
uninstall_app() {
    local app=$1
    if [ -z "$app" ]; then
        zenity --error --text="No app specified for uninstallation."
        return 1
    fi

    sudo apt-get remove --purge -y "$app" && sudo apt-get autoremove -y
    zenity --info --text="Successfully uninstalled $app."
}

# Function to check for updates
check_for_updates() {
    local upstream_version=$(curl -fs "$UPSTREAM_VERSION_URL")
    if [[ -z "$upstream_version" ]]; then
        zenity --error --text="Failed to fetch upstream version!" --title="App Manager - Update"
        return 1
    fi

    if [[ "$VERSION" < "$upstream_version" ]]; then
        if zenity --question --text="An update is available ($upstream_version). Install it? (Script will restart)" --title="App Manager - Update"; then
            if curl -fs -o "$TEMP_UPDATE_FILE" "$UPSTREAM_SCRIPT_URL"; then
                local current_script=$(realpath "$0")
                if sudo mv "$TEMP_UPDATE_FILE" "$current_script" && sudo chmod +x "$current_script"; then
                    zenity --info --text="Update successful. Restarting the script..." --title="App Manager - Update"
                    exec "$current_script"
                else
                    zenity --error --text="Failed to install the update. Please replace the script manually." --title="App Manager - Update"
                fi
            else
                zenity --error --text="Download failed! Check your internet connection." --title="App Manager - Update"
            fi
        fi
    else
        zenity --info --text="You are using the latest version of App Manager." --title="App Manager - Update"
    fi
}

# Function to update all apps
update_all_apps() {
    sudo apt-get update && sudo apt-get upgrade -y && sudo apt-get dist-upgrade -y
    if command -v snap &> /dev/null; then
        sudo snap refresh
    fi
    if command -v flatpak &> /dev/null; then
        flatpak update -y
    fi
    zenity --info --text="All updates completed successfully."
}

# GUI interactive mode
interactive_mode() {
    while true; do
        action=$(zenity --list \
            --title="App Manager - Interactive Mode" \
            --text="Select an action:" \
            --column="Action" --column="Description" \
            "Install App" "Install an app by selecting a file" \
            "List Apps" "View installed applications" \
            "Uninstall App" "Search and uninstall an app" \
            "Update All Apps" "Update all installed applications" \
            "Check for Updates" "Check for and install the latest version of App Manager" \
            "Backup Apps" "Backup installed apps" \
            "Restore Apps" "Restore apps from a backup" \
            "Exit" "Close the script")

        case "$action" in
            "Install App")
                local file=$(zenity --file-selection --title="Select a file to install" --file-filter="DEB packages (*.deb) | *.deb")
                [[ -n "$file" ]] && install_app "$file"
                ;;
            "List Apps")
                list_installed_apps | zenity --text-info --title="Installed Apps"
                ;;
            "Uninstall App")
                local app=$(list_installed_apps | zenity --list --column="Installed Apps" --title="Select an App to Uninstall")
                [[ -n "$app" ]] && uninstall_app "$app"
                ;;
            "Update All Apps")
                update_all_apps
                ;;
            "Check for Updates")
                check_for_updates
                ;;
            "Backup Apps")
                backup_apps
                ;;
            "Restore Apps")
                local file=$(zenity --file-selection --title="Select a backup file")
                [[ -n "$file" ]] && restore_apps "$file"
                ;;
            "Exit")
                zenity --info --text="Exiting App Manager." --title="App Manager"
                break
                ;;
            *)
                zenity --error --text="Invalid option. Please try again." --title="App Manager"
                ;;
        esac
    done
}

# Command-line interface
case "$1" in
    gui) interactive_mode ;;
    install) [[ -n "$2" ]] && install_app "$2" ;;
    uninstall) [[ -n "$2" ]] && uninstall_app "$2" ;;
    update-all) update_all_apps ;;
    backup-apps) backup_apps ;;
    restore-apps) [[ -n "$2" ]] && restore_apps "$2" ;;
    check-updates) check_for_updates ;;
    help | --help | -h)
        echo "Usage: ./app-manager [command]"
        echo "Commands:"
        echo "  gui              Launch GUI mode"
        echo "  install <file>   Install a .deb package"
        echo "  uninstall <app>  Uninstall an application"
        echo "  update-all       Update all installed apps"
        echo "  backup-apps      Backup installed apps"
        echo "  restore-apps <file> Restore apps from a backup file"
        echo "  check-updates    Check for script updates"
        echo "  help             Show this help message"
        ;;
    *)
        echo "Invalid command. Use 'help' to see available commands."
        ;;
esac
