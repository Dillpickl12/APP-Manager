#!/bin/bash

# Author: Dillrex
# Contributors: Quadsam

UPSTREAM_URL="https://raw.githubusercontent.com/Dillrex/APP-Manager/refs/heads/main"
VERSION=07

# List installed apps
list_installed_apps() {
    dpkg-query -f '${binary:Package}\n' -W | grep -vE "linux|^lib|^firmware|^systemd|^dpkg|^apt|^bash|^glibc|^python" | sort
}

# Search and select app
search_and_select_app() {
    local apps=$(list_installed_apps)
    if [ -z "$apps" ]; then
        zenity --info --text="No installed apps found!" --title="App Manager"
        echo ""
        return
    fi

    local search_term=""
    while true; do
        search_term=$(zenity --entry --title="App Manager - Search Apps" \
            --text="Enter a search term (or leave empty to list all apps):")

        if [ $? -ne 0 ]; then
            echo ""
            return
        fi

        local filtered_apps=$(echo "$apps" | grep -i "$search_term")
        if [ -z "$filtered_apps" ]; then
            zenity --warning --text="No apps found matching '$search_term'. Try again." --title="App Manager"
            continue
        fi

        local selected_app=$(zenity --list --title="App Manager - Select an App" \
            --text="Select an app from the list." --column="Installed Apps" $(echo "$filtered_apps"))

        if [ -z "$selected_app" ]; then
            zenity --info --text="No app selected. Returning to the main menu." --title="App Manager"
            echo ""
            return
        fi

        echo "$selected_app"
        return
    done
}

# Uninstall app
uninstall_app() {
    local app=$1
    if [ -z "$app" ]; then
        echo "No app specified for uninstallation."
        return 1
    fi

    echo "Uninstalling $app..."
    sudo apt-get remove --purge -y "$app" && sudo apt-get autoremove -y
}

uninstall_from_gui() {
    local selected_app=$(search_and_select_app)
    if [ -z "$selected_app" ]; then
        return
    fi

    if zenity --question --text="Are you sure you want to uninstall $selected_app?" --title="App Manager"; then
        uninstall_app "$selected_app"
        if [ $? -eq 0 ]; then
            zenity --info --text="$selected_app has been successfully uninstalled." --title="App Manager"
        else
            zenity --error --text="Error uninstalling $selected_app." --title="App Manager"
        fi
    fi
}

# Install app
install_app() {
    local file=$1
    if [[ "$file" == *.deb ]]; then
        echo "Installing $file..."
        if sudo dpkg -i "$file" && sudo apt-get install -f -y; then
            echo "Successfully installed $file."
        else
            echo "Failed to install $file. Check for errors."
        fi
    else
        echo "Unsupported file type. Please select a valid .deb file."
    fi
}

install_from_gui() {
    local file=$(zenity --file-selection --title="Select a file to install" \
        --file-filter="DEB packages (*.deb) | *.deb" \
        --file-filter="All files (*.*) | *.*")

    if [ -z "$file" ]; then
        zenity --info --text="No file selected. Returning to the main menu." --title="App Manager"
        return
    fi

    install_app "$file"
}

check_for_updates() {
    UPSTREAM_VERSION_URL="https://raw.githubusercontent.com/Dillrex/APP-Manager/main/version.txt"
    UPSTREAM_SCRIPT_URL="https://raw.githubusercontent.com/Dillrex/APP-Manager/main/app-manager"

    echo "Fetching upstream version..."
    upstream_version=$(curl -fs "$UPSTREAM_VERSION_URL")
    if [[ -z $upstream_version ]]; then
        zenity --error --text="Failed to fetch upstream version!" --title="App Manager - Update"
        echo "Error: Could not fetch upstream version."
        return 1
    fi

    echo "Current version: $VERSION, Upstream version: $upstream_version"
    if [[ $VERSION -lt $upstream_version ]]; then
        if zenity --question --text="An update is available ($upstream_version). Install it? (Script will restart)" --title="App Manager - Update"; then
            echo "Downloading update from: $UPSTREAM_SCRIPT_URL"
            if curl -fs -o /tmp/app-manager.update "$UPSTREAM_SCRIPT_URL"; then
                echo "Update downloaded to /tmp/app-manager.update"
                current_script=$(realpath "$0")
                if sudo mv /tmp/app-manager.update "$current_script" && sudo chmod +x "$current_script"; then
                    zenity --info --text="Update successful. Restarting the script..." --title="App Manager - Update"
                    exec "$current_script"
                else
                    zenity --error --text="Failed to install the update. Please replace the script manually." --title="App Manager - Update"
                    echo "Error: Failed to move or set permissions for the update."
                fi
            else
                zenity --error --text="Download failed! Check your internet connection." --title="App Manager - Update"
                echo "Error: Download failed."
            fi
        else
            zenity --info --text="Update skipped. You can check again later." --title="App Manager - Update"
            echo "Update skipped by the user."
        fi
    else
        zenity --info --text="You are using the latest version of App Manager." --title="App Manager - Update"
        echo "No update available."
    fi
}



# Update app (manual and interactive)
update_app() {
    local app=$1
    if [ -z "$app" ]; then
        echo "No app specified for update."
        return 1
    fi

    echo "Updating $app..."
    sudo apt-get update && sudo apt-get --only-upgrade install -y "$app"
}

update_from_gui() {
    local selected_app=$(search_and_select_app)
    if [ -z "$selected_app" ]; then
        return
    fi

    zenity --info --text="Updating $selected_app..." --title="App Manager"
    update_app "$selected_app"
}

# Update all apps
update_all_apps() {
    echo "Updating all apps..."
    sudo apt-get update && sudo apt-get upgrade -y
}

update_all_from_gui() {
    zenity --info --text="Updating all installed applications..." --title="App Manager"
    update_all_apps
}

# Interactive mode
interactive_mode() {
    while true; do
        action=$(zenity --list \
            --title="App Manager - Interactive Mode" \
            --text="Select an action:" \
            --column="Action" --column="Description" \
            "Install App" "Install an app by selecting a file" \
            "List Apps" "View and search installed applications" \
            "Uninstall App" "Search and uninstall an app" \
            "Update App" "Search and update a specific app" \
            "Update All Apps" "Update all installed applications" \
            "Check for Updates" "Check for and install the latest version of App Manager" \
            --width=800 --height=600)

        if [ -z "$action" ]; then
            zenity --info --text="Exiting Interactive Mode." --title="App Manager"
            break
        fi

        case "$action" in
            "Install App") install_from_gui ;;
            "List Apps") list_installed_apps | zenity --text-info --title="Installed Apps" ;;
            "Uninstall App") uninstall_from_gui ;;
            "Update App") update_from_gui ;;
            "Update All Apps") update_all_from_gui ;;
            "Check for Updates") check_for_updates ;;
            *) zenity --error --text="Invalid option." --title="App Manager" ;;
        esac
    done
}

# Show help
show_help() {
    echo "Available commands:"
    echo "  i                            Launch GUI-based interactive mode"
    echo "  install <file>               Install an app manually by specifying a file path"
    echo "  uninstall <app>              Uninstall an app manually by specifying its name"
    echo "  update-app <app>             Update a specific app manually"
    echo "  update-all                   Update all installed applications manually"
    echo "  check-for-updates            Check for and install script updates"
    echo "  list-apps                    List all installed applications"
    echo "  help                         Show this help message"
}

# Main logic
if [ -z "$1" ]; then
    show_help
    exit 1
fi

case "$1" in
    i) interactive_mode ;;
    install) install_app "$2" ;;
    uninstall) uninstall_app "$2" ;;
    update-app) update_app "$2" ;;
    update-all) update_all_apps ;;
    check-for-updates) check_for_updates ;;
    list-apps) list_installed_apps ;;
    help) show_help ;;
    *) echo "Unknown command: $1"; show_help ;;
esac
