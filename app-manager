#!/bin/bash

# Author: Dillrex (Dylan)

list_installed_apps() {
    dpkg-query -f '${binary:Package}\n' -W | grep -vE "linux|^lib|^firmware|^systemd|^dpkg|^apt|^bash|^glibc|^python" | sort
}

search_and_select_app() {
    local apps=$(list_installed_apps)
    if [ -z "$apps" ]; then
        zenity --info --text="No installed apps found!" --title="App Manager"
        echo ""
        return
    fi

    local search_term=""
    while true; do
        # Ask for a search term
        search_term=$(zenity --entry \
            --title="App Manager - Search Apps" \
            --text="Enter a search term (or leave empty to list all apps):")

        if [ $? -ne 0 ]; then
            # User pressed cancel
            echo ""
            return
        fi

        # Filter apps based on search term
        local filtered_apps=$(echo "$apps" | grep -i "$search_term")
        if [ -z "$filtered_apps" ]; then
            zenity --warning --text="No apps found matching '$search_term'. Try again." --title="App Manager"
            continue
        fi

        # Let the user select from the filtered apps
        local selected_app=$(zenity --list \
            --title="App Manager - Select an App" \
            --text="Select an app from the list." \
            --column="Installed Apps" $(echo "$filtered_apps"))

        if [ -z "$selected_app" ]; then
            zenity --info --text="No app selected. Returning to the main menu." --title="App Manager"
            echo ""
            return
        fi

        echo "$selected_app"
        return
    done
}

uninstall_from_gui() {
    local selected_app=$(search_and_select_app)
    if [ -z "$selected_app" ]; then
        return
    fi

    if zenity --question --text="Are you sure you want to uninstall $selected_app?" --title="App Manager"; then
        sudo apt-get remove --purge -y "$selected_app" && sudo apt-get autoremove -y
        if [ $? -eq 0 ]; then
            zenity --info --text="$selected_app has been successfully uninstalled." --title="App Manager"
        else
            zenity --error --text="Error uninstalling $selected_app." --title="App Manager"
        fi
    fi
}

install_from_gui() {
    # Prompt the user to select a file
    local file=$(zenity --file-selection --title="Select a file to install" \
        --file-filter="DEB packages (*.deb) | *.deb" \
        --file-filter="Tarballs (*.tar.gz *.tar.xz *.tar.bz2) | *.tar.gz *.tar.xz *.tar.bz2" \
        --file-filter="All files (*.*) | *.*")

    # Exit if no file is selected
    if [ -z "$file" ]; then
        zenity --info --text="No file selected. Returning to the main menu." --title="App Manager"
        return
    fi

    # Determine the file type and proceed with installation
    if [[ "$file" == *.deb ]]; then
        if sudo dpkg -i "$file" && sudo apt-get install -f -y; then
            zenity --info --text="Successfully installed $file!" --title="App Manager"
        else
            zenity --error --text="Failed to install $file. Check for errors." --title="App Manager"
        fi
    elif [[ "$file" == *.tar.gz || "$file" == *.tar.xz || "$file" == *.tar.bz2 ]]; then
        local extract_dir="/opt/$(basename "$file" | sed 's/\.[^.]*$//')"
        sudo mkdir -p "$extract_dir"
        if sudo tar -xf "$file" -C "$extract_dir" && [ -f "$extract_dir/install.sh" ]; then
            sudo bash "$extract_dir/install.sh"
            if [ $? -eq 0 ]; then
                zenity --info --text="Successfully installed $file!" --title="App Manager"
            else
                zenity --error --text="Failed to install $file. Check for errors." --title="App Manager"
            fi
        else
            zenity --error --text="Failed to extract or install $file. Check for errors." --title="App Manager"
        fi
    else
        zenity --error --text="Unsupported file type. Please select a valid .deb or tarball file." --title="App Manager"
    fi
}

manual_install() {
    read -p "Enter the path to the .deb or package file: " file
    if [ ! -f "$file" ]; then
        echo "Error: File not found."
        return
    fi

    if [[ "$file" == *.deb ]]; then
        sudo dpkg -i "$file" && sudo apt-get install -f -y
        if [ $? -eq 0 ]; then
            echo "Successfully installed $file!"
        else
            echo "Error installing $file."
        fi
    else
        echo "Unsupported file type. Please provide a valid .deb file."
    fi
}

manual_uninstall() {
    read -p "Enter the name of the package to uninstall: " app_name
    if [ -z "$app_name" ]; then
        echo "Error: No package name entered."
        return
    fi

    sudo apt-get remove --purge -y "$app_name" && sudo apt-get autoremove -y
    if [ $? -eq 0 ]; then
        echo "$app_name has been successfully uninstalled."
    else
        echo "Error uninstalling $app_name. Check for errors."
    fi
}

interactive_mode() {
    while true; do
        action=$(zenity --list \
            --title="App Manager - Interactive Mode" \
            --text="Select an action:" \
            --column="Action" --column="Description" \
            "Install App" "Install an app by selecting a file" \
            "List Apps" "View and search installed applications" \
            "Uninstall App" "Search and uninstall an app" \
            --width=500 \
            --height=300)

        # Handle if user presses 'X'
        if [ -z "$action" ]; then
            zenity --info --text="Exiting Interactive Mode." --title="App Manager"
            break
        fi

        case "$action" in
            "Install App")
                install_from_gui
                ;;
            "List Apps")
                search_and_select_app
                ;;
            "Uninstall App")
                uninstall_from_gui
                ;;
            *)
                zenity --error --text="Invalid option." --title="App Manager"
                ;;
        esac
    done
}

show_help() {
    echo "Available commands:"
    echo "  i                            Launch GUI-based interactive mode"
    echo "  manual-install               Install an app manually via terminal"
    echo "  manual-uninstall             Uninstall an app manually via terminal"
    echo "  help                         Show this help message"
}

if [ -z "$1" ]; then
    show_help
    exit 1
fi

case "$1" in
    i)
        interactive_mode
        ;;
    manual-install)
        manual_install
        ;;
    manual-uninstall)
        manual_uninstall
        ;;
    help)
        show_help
        ;;
    *)
        echo "Unknown command: $1"
        show_help
        ;;
esac
